pragma Unsafe_Module;

import Austral.Memory (
    Address,
    Pointer,
    nullCheck,
    allocate,
    load,
    store,
    deallocate,
    loadRead,
    loadWrite
);

module body Example.Box is
    -- A linear pointer.
    record Box[T: Type]: Linear is
        pointer: Pointer[T];
    end;

    -- Construct a box from a value. If allocation fails, return the value.
    generic [T: Type]
    function Make(val: T): Either[Box[T], T] is
        let addr: Address[T] := allocate();
        case nullCheck(addr) of
            when Some(value: Pointer[T]) do
                store(value, val);
                let box: Box[T] := Box(pointer => value);
                let left: Either[Box[T], T] := Left(left => box);
                return left;
            when None do
                -- Allocation failed, return the object we tried to box.
                let right: Either[Box[T], T] := Right(right => val);
                return right;
        end case;
    end;

    -- Unbox and deallocate.
    generic [T: Type]
    function Unbox(box: Box[T]): T is
        let { pointer: Pointer[T] } := box;
        let value: T := load(pointer);
        deallocate(pointer);
        return value;
    end;

    -- If the box contains a free value, swap it and discard the contents.
    generic [X: Free]
    function Swap_Free(box: Box[X], new: X): Box[X] is
        let { pointer: Pointer[X] } := box;
        let old: X := load(pointer);
        store(pointer, new);
        let newbox: Box[X] := Box(pointer => pointer);
        return newbox;
    end;

    generic [T: Free, R: Region]
    function Read_Free(boxref: &[Box[T], R]): T is
        let ptrref: &[Pointer[T], R] := &(boxref->pointer);
        let ptr: Pointer[T] := !ptrref;
        return load(ptr);
    end;

    generic [T: Free, R: Region]
    function Store_Free(boxref: &![Box[T], R], value: T): Unit is
        let ptr: Pointer[T] := boxref->pointer;
        store(ptr, value);
        return nil;
    end;

    generic [T: Type, R: Region]
    function Get_Value_Ref(boxref: &[Box[T], R]): &[T, R] is
        let ref: &[T, R] := loadRead(&(boxref->pointer));
        return ref;
    end;

    generic [T: Free, R: Region]
    function Swap_Mut(boxref: &![Box[T], R], value: T): T is
        let ptr: Pointer[T] := boxref->pointer;
        let old_value: T := load(ptr);
        store(ptr, value);
        return old_value;
    end;

    pragma Foreign_Import(External_Name => "putchar");
    function Put_Character(character: Int32): Int32 is
    end;

    function main(): ExitCode is
        -- Box a value, swap it, and unwrap it.
        let b: Either[Box[Int32], Int32] := Make('e');
        case b of
            when Left(left: Box[Int32]) do
                let newbox: Box[Int32] := Swap_Free(left, 'a');
                let contents: Int32 := Unbox(newbox);
                Put_Character(contents);
            when Right(right: Int32) do
                abort("Unexpected.");
        end case;
        -- Box a value, read_free it and unbox it.
        let b2: Either[Box[Int32], Int32] := Make('a');
        case b2 of
            when Left(left: Box[Int32]) do
                borrow value2: &[Box[Int32], rho] := &left do
                    let contents: Int32 := Read_Free(value2);
                    Put_Character(contents);
                end borrow;
                Unbox(left);
            when Right(right: Int32) do
                abort("Unexpected.");
        end case;
        -- Box a value, store a new one through a mutable reference, and unbox it.
        let b3: Either[Box[Int32], Int32] := Make('e');
        case b3 of
            when Left(left: Box[Int32]) do
                var left2: Box[Int32] := left;
                borrow value2: &![Box[Int32], rho] := &!left2 do
                    Store_Free(value2, 'a');
                end borrow;
                let contents: Int32 := Unbox(left2);
                Put_Character(contents);
            when Right(right: Int32) do
                abort("Unexpected.");
        end case;
        -- Box a value, load it through a reference, and unbox it.
        let b4: Either[Box[Int32], Int32] := Make('a');
        case b4 of
            when Left(left: Box[Int32]) do
                borrow boxref: &[Box[Int32], rho] := &left do
                    let valueref: &[Int32, rho] := Get_Value_Ref(boxref);
                    let contents: Int32 := !(valueref);
                    Put_Character(contents);
                end borrow;
                Unbox(left);
            when Right(right: Int32) do
                abort("Unexpected.");
        end case;
        -- Box a value, swap it through a mutable reference, and unbox it.
        let b5: Either[Box[Int32], Int32] := Make('e');
        case b5 of
            when Left(left: Box[Int32]) do
                var left2: Box[Int32] := left;
                borrow boxmutref: &![Box[Int32], rho] := &!left2 do
                    Swap_Mut(boxmutref, 'a');
                end borrow;
                Put_Character(Unbox(left2));
            when Right(right: Int32) do
                abort("Unexpected.");
        end case;
        return ExitSuccess();
    end;
end module body.

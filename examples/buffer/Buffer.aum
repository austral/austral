-- Need this to use Austral.Memory.
pragma Unsafe_Module;

import Austral.Memory (
    Address,
    Pointer,
    allocateBuffer,
    resizeArray,
    deallocate,
    nullCheck,
    positiveOffset,
    store,
    load
);

module body Example.Buffer is
    ----------
    -- Private
    ----------

    -- The size of empty buffers.
    --constant Initial_Size: Index := 16;

    -- The growth factor times the array's capacity tells us the next size of
    -- the array when resizing. Naively, we double the size of the array when
    -- hitting the capacity.
    constant Growth_Factor: Index := 2;

    -- allocate an array, and abort if allocation fails.
    generic [T: Type]
    function allocate_Or_Die(size: Index): Pointer[T] is
        let addr: Address[T] := allocateBuffer(size);
        case nullCheck(addr) of
            when Some(value: Pointer[T]) do
                return value;
            when None do
                abort("Allocation failed.");
        end case;
    end;

    ---------
    -- Public
    ---------

    record Buffer[T: Type]: Linear is
        -- The capacity is the true underlying size. It is different from the
        -- size since we allocate more space than we need in order to minimize
        -- frequent reallocation.
        capacity: Index;
        -- The number of elements actually stored in the array.
        size: Index;
        -- The underlying heap array.
        array: Pointer[T];

        -- Invariants:
        --
        --   capacity >= size
    end;

    -- Lifecycle functions.

    -- generic [T: Type]
    -- function Empty_Buffer(): Buffer[T] is
    --     -- For simplicity, we want the buffer to always be non-empty. Also, most
    --     -- empty buffers won't stay empty in perpetuity. So to create an empty
    --     -- buffer we allocate Initial_Size.
    --     let Initial_Size: Nat64 := 16;
    --     let array: Heap_Array[T] := allocate_Or_Die(Initial_Size);
    --     return Buffer(
    --         capacity => Initial_Size,
    --         size => 0,
    --         array => array
    --     );
    -- end;

    generic [T: Free]
    function Initialize(size: Index, elem: T): Buffer[T] is
        let array: Pointer[T] := allocate_Or_Die(size);
        for i from 0 to size - 1 do
            let nth: Pointer[T] := positiveOffset(array, i);
            store(nth, elem);
        end for;
        let buf: Buffer[T] := Buffer(
            capacity => size,
            size => size,
            array => array
        );
        return buf;
    end;

    generic [T: Type]
    function Destroy_Buffer(buffer: Buffer[T]): Unit is
        let { capacity: Index, size: Index, array: Pointer[T] } := buffer;
        deallocate(array);
        return nil;
    end;

    -- Query

    generic [T: Free, R: Region]
    function Buffer_Size(buffer: &[Buffer[T], R]): Index is
        return buffer->size;
    end;

    -- Retrieval

    generic [T: Free, R: Region]
    function Nth_Free(buffer: &[Buffer[T], R], index: Index): T is
        let arr: Pointer[T] := buffer->array;
        let nth_ptr: Pointer[T] := positiveOffset(arr, index);
        let val: T := load(nth_ptr);
        return val;
    end;

    ---generic [T: Type, R: Region]
    -- function Nth_Ref(buffer: &[Buffer[T], R], index: Index): &[T, R] is
    --    return buffer->array[index];
    -- end;

    pragma Foreign_Import(External_Name => "putchar");
    function Put_Character(character: Int32): Int32 is
    end;

    function main(): ExitCode is
        -- Create a buffer of e's.
        let buf: Buffer[Int32] := Initialize(3, 101);
        borrow bufref: &[Buffer[Int32], rho] := &buf do
            let size: Index := Buffer_Size(bufref);
            if size = 3 then
                Put_Character(97);
            end if;
            let first: Int32 := Nth_Free(bufref, 0);
            Put_Character(first);
        end borrow;
        Destroy_Buffer(buf);
        return ExitSuccess();
    end;
 end module body.

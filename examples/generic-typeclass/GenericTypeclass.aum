pragma Unsafe_Module;

import Austral.Memory (Address, allocate, nullPointer);

module body Example.GenericTypeclass is
    typeclass Numerical(T: Free) is
        method To_Integer(x: T): Int32;
    end;

    generic [U: Free]
    instance Numerical(Address[U]) is
        method To_Integer(x: Address[U]): Int32 is
            return 0;
        end;
    end;

    function Pointer_To_Integer(): Int32 is
        let ptr: Address[Int32] := allocate();
        let null: Address[Int32] := nullPointer();
        if ptr /= null then
            let X: Int32 := To_Integer(ptr);
            return X;
        end if;
    end;

    function main(): ExitCode is
        Pointer_To_Integer();
        return ExitSuccess();
    end;
end module body.

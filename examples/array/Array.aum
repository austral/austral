pragma Unsafe_Module;

import Austral.Memory (
    Address,
    Pointer,
    nullCheck,
    allocateBuffer,
    deallocate,
    positiveOffset,
    load,
    store
);

module body Example.Array is
    pragma Foreign_Import(External_Name => "putchar");
    function Put_Character(character: Nat8): Int32 is
    end;

    function Show_Bool(b: Bool): Unit is
        if b then
            Put_Character(84);
        else
            Put_Character(70);
        end if;
        return nil;
    end;

    function main(): ExitCode is
        let addr: Address[Bool] := allocateBuffer(3);
        case nullCheck(addr) of
            when Some(value: Pointer[Bool]) do
                let arr: Pointer[Bool] := value;
                let firstp: Pointer[Bool] := arr;
                let secondp: Pointer[Bool] := positiveOffset(arr, 1);
                let thirdp: Pointer[Bool] := positiveOffset(arr, 2);
                store(firstp, true);
                store(secondp, false);
                store(thirdp, true);
                let first: Bool := load(firstp);
                let second: Bool := load(secondp);
                let third: Bool := load(thirdp);
                Show_Bool(first);
                Show_Bool(second);
                Show_Bool(third);
                deallocate(arr);
            when None do
                skip;
        end case;
        return ExitSuccess();
    end;
end module body.

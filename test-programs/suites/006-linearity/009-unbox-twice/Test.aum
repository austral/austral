pragma Unsafe_Module;

import Austral.Memory (
    Pointer,
    Address,
    nullCheck,
    allocate,
    load,
    store,
    deallocate
);

module body Test is
    record Box[T: Type]: Linear is
        pointer: Pointer[T];
    end;

    generic [T: Type]
    function Make(val: T): Either[Box[T], T] is
        let addr: Address[T] := allocate();
        case nullCheck(addr) of
            when Some(value: Pointer[T]) do
                store(value, val);
                let box: Box[T] := Box(pointer => value);
                let left: Either[Box[T], T] := Left(left => box);
                return left;
            when None do
                -- Allocation failed, return the object we tried to box.
                let right: Either[Box[T], T] := Right(right => val);
                return right;
        end case;
    end;

    generic [T: Type]
    function Unbox(box: Box[T]): T is
        let { pointer: Pointer[T] } := box;
        let value: T := load(pointer);
        deallocate(pointer);
        return value;
    end;

    function main(): ExitCode is
        let e: Either[Box[Int32], Int32] := Make('e');
        case e of
            when Left(left: Box[Int32]) do
                Unbox(left);
                Unbox(left);
            when Right(right: Int32) do
                skip;
        end case;
        return ExitSuccess();
    end;
end module body.

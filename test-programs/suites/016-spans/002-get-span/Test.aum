pragma Unsafe_Module;

import Austral.Memory (
    Pointer,
    Address,
    allocateBuffer,
    nullCheck,
    deallocate,
    span,
    spanWrite
);

module body Test is
    function allocateOrDie(): Pointer[Int32] is
        let addr: Address[Int32] := allocateBuffer(10);
        case nullCheck(addr) of
            when Some(value: Pointer[Int32]) do
                return value;
            when None do
                abort("Allocation failed.");
        end case;
    end;

    function main(): ExitCode is
        var ptr: Pointer[Int32] := allocateOrDie();
        borrow ref: &[Pointer[Int32], R] := &ptr do
            let sp: Span[Int32, R] := span(ref, 0, 9);
            printLn(spanLength(sp));
        end borrow;
        borrow ref2: &![Pointer[Int32], R] := &!ptr do
            let sp2: Span![Int32, R] := spanWrite(ref2, 0, 9);
            printLn(spanWriteLength(sp2));
        end borrow;
        deallocate(ptr);
        return ExitSuccess();
    end;
end module body.

pragma Unsafe_Module;

import Austral.Memory (
    Pointer,
    Address,
    allocateBuffer,
    nullCheck,
    deallocate,
    span,
    spanWrite,
    positiveOffset,
    store
);

module body Test is
    function allocateOrDie(): Pointer[Int32] is
        let addr: Address[Int32] := allocateBuffer(10);
        case nullCheck(addr) of
            when Some(value: Pointer[Int32]) do
                return value;
            when None do
                abort("Allocation failed.");
        end case;
    end;

    function downcast(idx: Index): Int32 is
        case toInt32(idx) of
            when Some(value: Int32) do
                return value;
            when None do
                abort("Index value too large for Int32.");
        end case;
    end;

    generic [R: Region]
    function writeValues(ref: &![Pointer[Int32], R]): Unit is
        var sp: Span![Int32, R] := spanWrite(ref, 0, 9);
        for i from 0 to 9 do
            let newval: Int32 := downcast(i + 1);
            sp[i] := newval;
        end for;
        return nil;
    end;

    generic [R: Region]
    function printValues(ref: &[Pointer[Int32], R]): Unit is
        let sp: Span[Int32, R] := span(ref, 0, 9);
        for i from 0 to 9 do
            let val: Int32 := sp[i];
            printLn(val);
        end for;
        return nil;
    end;

    function main(): ExitCode is
        var ptr: Pointer[Int32] := allocateOrDie();
        writeValues(&!ptr);
        printValues(&ptr);
        deallocate(ptr);
        return ExitSuccess();
    end;
end module body.

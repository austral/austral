module body Test is
    union Foo: Linear is
        case Value is
            value: Int32;
    end;

    function consume(foo: Foo): Unit is
        case foo of
            when Value(value: Int32) do
                skip;
        end case;
        return nil;
    end;

    function main(): ExitCode is
        let u: Foo := Value(value => 123);
        borrow uref: &[Foo, R] := &u do
            case uref of
                when Value(value: &[Int32, R]) do
                    let i: Int32 := !value;
                    printLn(i);
            end case;
        end borrow;
        consume(u);
        return ExitSuccess();
    end;
end module body.
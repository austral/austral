--
-- Part of the Austral project, under the Apache License v2.0 with LLVM Exceptions.
-- See LICENSE file for details.
--
-- SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
--
import Standard.Test.Unit (
    suiteHeading,
    testHeading,
    assertSuccess
);
import Standard.IO (
    TerminalCapability,
    acquireTerminal,
    releaseTerminal,
    writeByte
);
import Standard.IO.Terminal (
    StandardOutput,
    StandardError,
    StandardInput,
    acquireOutput,
    acquireError,
    acquireInput,
    releaseOutput,
    releaseError,
    releaseInput
);

module body Standard.Test.IO.Terminal is
    generic [R: Region]
    function terminalTestSuite(root: &![RootCapability, R]): Unit is
        suiteHeading("Standard.IO.Terminal");
        var termcap: TerminalCapability := acquireTerminal(root);
        stdoutWriteByteTest(&!termcap);
        stderrWriteByteTest(&!termcap);
        releaseTerminal(termcap);
        return nil;
    end;

    generic [R: Region]
    function stdoutWriteByteTest(term: &![TerminalCapability, R]): Unit is
        testHeading("stdout: writeByte");
        var stdout: StandardOutput := acquireOutput(&~term);
        writeByte(&!stdout, 'a');
        releaseOutput(stdout);
        assertSuccess("writeByte completed");
        return nil;
    end;

    generic [R: Region]
    function stderrWriteByteTest(term: &![TerminalCapability, R]): Unit is
        testHeading("stderr: writeByte");
        var stderr: StandardError := acquireError(&~term);
        writeByte(&!stderr, 'a');
        releaseError(stderr);
        assertSuccess("writeByte completed");
        return nil;
    end;
end module body.
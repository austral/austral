--
-- Part of the Austral project, under the Apache License v2.0 with LLVM Exceptions.
-- See LICENSE file for details.
--
-- SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
--

-- Mark this module as unsafe so we can use the FFI.
pragma Unsafe_Module;

import Austral.Memory (
    Pointer,
    Address,
    allocate,
    nullCheck,
    store,
    load,
    deallocate,
    loadRead
);


module body Standard.Box is
    record Box[T: Type]: Linear is
        pointer: Pointer[T];
    end;

    generic [T: Type]
    function makeBox(val: T): Either[Box[T], T] is
        let addr: Address[T] := allocate();
        case nullCheck(addr) of
            when Some(value: Pointer[T]) do
                store(value, val);
                let box: Box[T] := Box(pointer => value);
                let left: Either[Box[T], T] := Left(left => box);
                return left;
            when None do
                -- Allocation failed, return the object we tried to box.
                let right: Either[Box[T], T] := Right(right => val);
                return right;
        end case;
    end;

    generic [T: Type]
    function unbox(box: Box[T]): T is
        let { pointer: Pointer[T] } := box;
        let value: T := load(pointer);
        deallocate(pointer);
        return value;
    end;

    generic [T: Free, R: Region]
    function readFree(boxref: &[Box[T], R]): T is
        let ptr: Pointer[T] := boxref->pointer;
        return load(ptr);
    end;

    generic [T: Free, R: Region]
    function storeFree(boxref: &![Box[T], R], value: T): Unit is
        let ptr: Pointer[T] := boxref->pointer;
        store(ptr, value);
        return nil;
    end;

    generic [T: Type, R: Region]
    function boxSwap(boxref: &![Box[T], R], new: T): T is
        let ptr: Pointer[T] := boxref->pointer;
        let old: T := load(ptr);
        store(ptr, new);
        return old;
    end;

    generic [T: Type, R: Region]
    function unboxReadRef(ref: &[Box[T], R]): &[T, R] is
        return loadRead(&(ref->pointer));
    end;
end module body.
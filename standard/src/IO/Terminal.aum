--
-- Part of the Austral project, under the Apache License v2.0 with LLVM Exceptions.
-- See LICENSE file for details.
--
-- SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
--
pragma Unsafe_Module;

import Austral.Memory (
    Address
);
import Standard.IO (
    TerminalCapability,
    ByteOutputStream,
    writeByte,
    ByteInputStream,
    readByte
);
import Standard.StringBuilder (
    StringBuilder,
    makeStringBuilder,
    finalize,
    writeByte as sbWriteByte
);

module body Standard.IO.Terminal is
    record StandardOutput: Linear is
    end;

    record StandardError: Linear is
    end;

    record StandardInput: Linear is
    end;

    generic [R: Region]
    function acquireOutput(term: &![TerminalCapability, R]): StandardOutput is
        return StandardOutput();
    end;

    generic [R: Region]
    function acquireError(term: &![TerminalCapability, R]): StandardError is
        return StandardError();
    end;

    generic [R: Region]
    function acquireInput(term: &![TerminalCapability, R]): StandardInput is
        return StandardInput();
    end;

    function releaseOutput(stream: StandardOutput): Unit is
        let {} := stream;
        return nil;
    end;

    function releaseError(stream: StandardError): Unit is
        let {} := stream;
        return nil;
    end;

    function releaseInput(stream: StandardInput): Unit is
        let {} := stream;
        return nil;
    end;

    instance ByteOutputStream(StandardOutput) is
        generic [R: Region]
        method writeByte(stream: &![StandardOutput, R], byte: Nat8): Unit is
            let stdout: Address[Nat8] := getStdout();
            case toInt32(byte) of
                when Some(value as c: Int32) do
                    fputc(c, stdout);
                when None do
                    skip;
            end case;
            return nil;
        end;
    end;

    instance ByteOutputStream(StandardError) is
        generic [R: Region]
        method writeByte(stream: &![StandardOutput, R], byte: Nat8): Unit is
            let stderr: Address[Nat8] := getStderr();
            case toInt32(byte) of
                when Some(value as c: Int32) do
                    fputc(c, stderr);
                when None do
                    skip;
            end case;
            return nil;
        end;
    end;

    instance ByteInputStream(StandardInput) is
        generic [R: Region]
        method readByte(stream: &![StandardOutput, R]): Option[Nat8] is
            let stdin: Address[Nat8] := getStdin();
            let res: Int32 := fgetc(stdin);
            if res = EOF then
                return None();
            else
                return toNat8(res);
            end if;
        end;
    end;

    generic [R: Region]
    function readLine(stdin: &![StandardInput, R]): String is
        var sb: StringBuilder := makeStringBuilder();
        var reading: Bool := true;
        while reading do
            case readByte(&~stdin) of
                when Some(value as byte: Nat8) do
                    if (byte = '\r') or (byte = '\n') then
                        reading := false;
                    else
                        sbWriteByte(&!sb, byte);
                    end if;
                when None do
                    -- EOF.
                    reading := false;
            end case;
        end while;
        return finalize(sb);
    end;

    --
    -- Internal foreign bindings.
    --

    constant EOF: Int32 := -1;

    function getStdout(): Address[Nat8] is
        return @embed(Address[Nat8], "au_stdout()");
    end;

    function getStderr(): Address[Nat8] is
        return @embed(Address[Nat8], "au_stderr()");
    end;

    function getStdin(): Address[Nat8] is
        return @embed(Address[Nat8], "au_stdin()");
    end;

    pragma Foreign_Import(External_Name => "fputc");
    function fputc(c: Int32, stream: Address[Nat8]): Int32 is
    end;

    pragma Foreign_Import(External_Name => "fgetc");
    function fgetc(stream: Address[Nat8]): Int32 is
    end;
end module body.
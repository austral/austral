--
-- Part of the Austral project, under the Apache License v2.0 with LLVM Exceptions.
-- See LICENSE file for details.
--
-- SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
--
import Standard.Buffer (
    Buffer,
    allocateEmpty,
    initialize,
    destroyFree,
    length as bufLength,
    nth as bufNth,
    storeNth as bufStoreNth
);

module body Standard.String is
    record String: Linear is
        buf: Buffer[Nat8];
    end;

    ---
    --- Lifecycle
    ---

    function makeEmpty(): String is
        let buf: Buffer[Nat8] := allocateEmpty();
        return String(
            buf => buf
        );
    end;

    function makeString(size: Index, initial: Nat8): String is
        let buf: Buffer[Nat8] := initialize(size, initial);
        return String(
            buf => buf
        );
    end;

    function fromLiteral(arr: Span[Nat8, Static]): String is
        let size: Index := spanLength(arr);
        var str: String := makeString(size, ' ');
        for i from 0 to size - 1 do
            storeNth(&!str, i, arr[i]);
        end for;
        return str;
    end;

    function destroyString(str: String): Unit is
        let { buf: Buffer[Nat8] } := str;
        destroyFree(buf);
        return nil;
    end;

    ---
    --- Retrieve
    ---

    generic [R: Region]
    function length(string: &[String, R]): Index is
        return bufLength(&(string->buf));
    end;

    generic [R: Region]
    function nthByte(string: &[String, R], pos: Index): Nat8 is
        return bufNth(&(string->buf), pos);
    end;

    ---
    --- Update
    ---

    """
    Write a byte to the given position in the string.
    """
    generic [R: Region]
    function storeNth(string: &![String, R], pos: Index, byte: Nat8): Unit is
        return bufStoreNth(&(string->buf), pos, byte);
    end;
end module body. 